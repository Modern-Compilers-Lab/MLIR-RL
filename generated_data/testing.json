{"linalg.matmul ins(%arg0, %arg1 : tensor<3072x128xf32>, tensor<128x256xf32>) outs(%arg2 : tensor<3072x256xf32>) -> tensor<3072x256xf32>": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<3072x128xf32>, tensor<128x256xf32>) outs(%arg2 : tensor<3072x256xf32>) -> tensor<3072x256xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<3072x128xf32>, %arg1: tensor<128x256xf32>, %arg2: tensor<3072x256xf32>) -> tensor<3072x256xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<3072x128xf32>, tensor<128x256xf32>) outs(%arg2 : tensor<3072x256xf32>) -> tensor<3072x256xf32>\n  return %ret : tensor<3072x256xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<3072x128xf32>, %arg1: tensor<128x256xf32>, %arg2: tensor<3072x256xf32>) -> tensor<3072x256xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<128x256xf32>\n    %1 = bufferization.to_memref %arg0 : memref<3072x128xf32>\n    %2 = bufferization.to_memref %arg2 : memref<3072x256xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<3072x256xf32>\n    memref.copy %2, %alloc : memref<3072x256xf32> to memref<3072x256xf32>\n    affine.for %arg3 = 0 to 3072 {\n      affine.for %arg4 = 0 to 256 {\n        affine.for %arg5 = 0 to 128 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<3072x128xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<128x256xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<3072x256xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<3072x256xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<3072x256xf32>\n    return %3 : tensor<3072x256xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<3072x256xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<3072x128xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<3072x128xf32>) -> tensor<3072x128xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<128x256xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<128x256xf32>) -> tensor<128x256xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<3072x256xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<3072x256xf32>) -> tensor<3072x256xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<3072x128xf32>, tensor<128x256xf32>) outs(%arg2 : tensor<3072x256xf32>) -> tensor<3072x256xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<3072x256xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<3072x256xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 3072, 1], ["%arg4", 0, 256, 1], ["%arg5", 0, 128, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 448223653}}