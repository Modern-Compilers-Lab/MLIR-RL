{"linalg.pooling_nchw_max {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x128x64x64xf32>, tensor<5x5xf32>) outs (%init: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32>": {"operation": "linalg.pooling_nchw_max {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x128x64x64xf32>, tensor<5x5xf32>) outs (%init: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32>", "wrapped_operation": "func.func @func_call(%input: tensor<4x128x64x64xf32>, %filter: tensor<5x5xf32>, %init: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32> {\n  %ret = linalg.pooling_nchw_max {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x128x64x64xf32>, tensor<5x5xf32>) outs (%init: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32>\n  return %ret : tensor<4x128x30x30xf32>\n}", "lowered_operation": "#map = affine_map<(d0, d1) -> (d0 * 2 + d1)>\nmodule {\n  func.func @func_call(%arg0: tensor<4x128x64x64xf32>, %arg1: tensor<5x5xf32>, %arg2: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32> {\n    %0 = bufferization.to_memref %arg0 : memref<4x128x64x64xf32>\n    %1 = bufferization.to_memref %arg2 : memref<4x128x30x30xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<4x128x30x30xf32>\n    memref.copy %1, %alloc : memref<4x128x30x30xf32> to memref<4x128x30x30xf32>\n    affine.for %arg3 = 0 to 4 {\n      affine.for %arg4 = 0 to 128 {\n        affine.for %arg5 = 0 to 30 {\n          affine.for %arg6 = 0 to 30 {\n            affine.for %arg7 = 0 to 5 {\n              affine.for %arg8 = 0 to 5 {\n                %3 = affine.apply #map(%arg5, %arg7)\n                %4 = affine.apply #map(%arg6, %arg8)\n                %5 = affine.load %0[%arg3, %arg4, %3, %4] : memref<4x128x64x64xf32>\n                %6 = affine.load %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x128x30x30xf32>\n                %7 = arith.maximumf %6, %5 : f32\n                affine.store %7, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x128x30x30xf32>\n              }\n            }\n          }\n        }\n      }\n    }\n    %2 = bufferization.to_tensor %alloc : memref<4x128x30x30xf32>\n    return %2 : tensor<4x128x30x30xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<4x128x30x30xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_input = bufferization.alloc_tensor() : tensor<4x128x64x64xf32>\n%input = linalg.fill ins(%val : f32) outs(%tmp_input : tensor<4x128x64x64xf32>) -> tensor<4x128x64x64xf32>\n%tmp_filter = bufferization.alloc_tensor() : tensor<5x5xf32>\n%filter = linalg.fill ins(%val : f32) outs(%tmp_filter : tensor<5x5xf32>) -> tensor<5x5xf32>\n%tmp_init = bufferization.alloc_tensor() : tensor<4x128x30x30xf32>\n%init = linalg.fill ins(%val : f32) outs(%tmp_init : tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.pooling_nchw_max {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x128x64x64xf32>, tensor<5x5xf32>) outs (%init: tensor<4x128x30x30xf32>) -> tensor<4x128x30x30xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<4x128x30x30xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<4x128x30x30xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 4, 1], ["%arg4", 0, 128, 1], ["%arg5", 0, 30, 1], ["%arg6", 0, 30, 1], ["%arg7", 0, 5, 1], ["%arg8", 0, 5, 1]], "op_count": {"+": 0, "-": 0, "*": 0, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg4", "%arg5 * 2 + %arg7", "%arg6 * 2 + %arg8"], ["%arg3", "%arg4", "%arg5", "%arg6"]], "store_data": []}, "execution_time": 38163035}}