{"linalg.matmul ins(%arg0, %arg1 : tensor<64x512xf32>, tensor<512x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>_0": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<64x512xf32>, tensor<512x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<64x512xf32>, %arg1: tensor<512x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<64x512xf32>, tensor<512x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n  return %ret : tensor<64x64xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<64x512xf32>, %arg1: tensor<512x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<512x64xf32>\n    %1 = bufferization.to_memref %arg0 : memref<64x512xf32>\n    %2 = bufferization.to_memref %arg2 : memref<64x64xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<64x64xf32>\n    memref.copy %2, %alloc : memref<64x64xf32> to memref<64x64xf32>\n    affine.for %arg3 = 0 to 64 {\n      affine.for %arg4 = 0 to 64 {\n        affine.for %arg5 = 0 to 512 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<64x512xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<512x64xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<64x64xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<64x64xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<64x64xf32>\n    return %3 : tensor<64x64xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<64x64xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<64x512xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<64x512xf32>) -> tensor<64x512xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<512x64xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<512x64xf32>) -> tensor<512x64xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<64x64xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<64x512xf32>, tensor<512x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<64x64xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<64x64xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 64, 1], ["%arg4", 0, 64, 1], ["%arg5", 0, 512, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 7721409}, "linalg.matmul ins(%arg0, %arg1 : tensor<128x256xf32>, tensor<256x512xf32>) outs(%arg2 : tensor<128x512xf32>) -> tensor<128x512xf32>_1": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<128x256xf32>, tensor<256x512xf32>) outs(%arg2 : tensor<128x512xf32>) -> tensor<128x512xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<128x256xf32>, %arg1: tensor<256x512xf32>, %arg2: tensor<128x512xf32>) -> tensor<128x512xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<128x256xf32>, tensor<256x512xf32>) outs(%arg2 : tensor<128x512xf32>) -> tensor<128x512xf32>\n  return %ret : tensor<128x512xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<128x256xf32>, %arg1: tensor<256x512xf32>, %arg2: tensor<128x512xf32>) -> tensor<128x512xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<256x512xf32>\n    %1 = bufferization.to_memref %arg0 : memref<128x256xf32>\n    %2 = bufferization.to_memref %arg2 : memref<128x512xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<128x512xf32>\n    memref.copy %2, %alloc : memref<128x512xf32> to memref<128x512xf32>\n    affine.for %arg3 = 0 to 128 {\n      affine.for %arg4 = 0 to 512 {\n        affine.for %arg5 = 0 to 256 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<128x256xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<256x512xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<128x512xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<128x512xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<128x512xf32>\n    return %3 : tensor<128x512xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<128x512xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<128x256xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<128x256xf32>) -> tensor<128x256xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<256x512xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<256x512xf32>) -> tensor<256x512xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<128x512xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<128x512xf32>) -> tensor<128x512xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<128x256xf32>, tensor<256x512xf32>) outs(%arg2 : tensor<128x512xf32>) -> tensor<128x512xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<128x512xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<128x512xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 128, 1], ["%arg4", 0, 512, 1], ["%arg5", 0, 256, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 62709696}, "linalg.matmul ins(%arg0, %arg1 : tensor<64x64xf32>, tensor<64x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>_2": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<64x64xf32>, tensor<64x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<64x64xf32>, %arg1: tensor<64x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<64x64xf32>, tensor<64x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n  return %ret : tensor<64x64xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<64x64xf32>, %arg1: tensor<64x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<64x64xf32>\n    %1 = bufferization.to_memref %arg0 : memref<64x64xf32>\n    %2 = bufferization.to_memref %arg2 : memref<64x64xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<64x64xf32>\n    memref.copy %2, %alloc : memref<64x64xf32> to memref<64x64xf32>\n    affine.for %arg3 = 0 to 64 {\n      affine.for %arg4 = 0 to 64 {\n        affine.for %arg5 = 0 to 64 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<64x64xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<64x64xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<64x64xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<64x64xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<64x64xf32>\n    return %3 : tensor<64x64xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<64x64xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<64x64xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<64x64xf32>) -> tensor<64x64xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<64x64xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<64x64xf32>) -> tensor<64x64xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<64x64xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<64x64xf32>, tensor<64x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<64x64xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<64x64xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 64, 1], ["%arg4", 0, 64, 1], ["%arg5", 0, 64, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 742872}, "linalg.matmul ins(%arg0, %arg1 : tensor<32x64xf32>, tensor<64x256xf32>) outs(%arg2 : tensor<32x256xf32>) -> tensor<32x256xf32>_3": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<32x64xf32>, tensor<64x256xf32>) outs(%arg2 : tensor<32x256xf32>) -> tensor<32x256xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<32x64xf32>, %arg1: tensor<64x256xf32>, %arg2: tensor<32x256xf32>) -> tensor<32x256xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<32x64xf32>, tensor<64x256xf32>) outs(%arg2 : tensor<32x256xf32>) -> tensor<32x256xf32>\n  return %ret : tensor<32x256xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<32x64xf32>, %arg1: tensor<64x256xf32>, %arg2: tensor<32x256xf32>) -> tensor<32x256xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<64x256xf32>\n    %1 = bufferization.to_memref %arg0 : memref<32x64xf32>\n    %2 = bufferization.to_memref %arg2 : memref<32x256xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<32x256xf32>\n    memref.copy %2, %alloc : memref<32x256xf32> to memref<32x256xf32>\n    affine.for %arg3 = 0 to 32 {\n      affine.for %arg4 = 0 to 256 {\n        affine.for %arg5 = 0 to 64 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<32x64xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<64x256xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<32x256xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<32x256xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<32x256xf32>\n    return %3 : tensor<32x256xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<32x256xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<32x64xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<32x64xf32>) -> tensor<32x64xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<64x256xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<64x256xf32>) -> tensor<64x256xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<32x256xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<32x256xf32>) -> tensor<32x256xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<32x64xf32>, tensor<64x256xf32>) outs(%arg2 : tensor<32x256xf32>) -> tensor<32x256xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<32x256xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<32x256xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 32, 1], ["%arg4", 0, 256, 1], ["%arg5", 0, 64, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 1516076}, "linalg.matmul ins(%arg0, %arg1 : tensor<128x64xf32>, tensor<64x32xf32>) outs(%arg2 : tensor<128x32xf32>) -> tensor<128x32xf32>_4": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<128x64xf32>, tensor<64x32xf32>) outs(%arg2 : tensor<128x32xf32>) -> tensor<128x32xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<128x64xf32>, %arg1: tensor<64x32xf32>, %arg2: tensor<128x32xf32>) -> tensor<128x32xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<128x64xf32>, tensor<64x32xf32>) outs(%arg2 : tensor<128x32xf32>) -> tensor<128x32xf32>\n  return %ret : tensor<128x32xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<128x64xf32>, %arg1: tensor<64x32xf32>, %arg2: tensor<128x32xf32>) -> tensor<128x32xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<64x32xf32>\n    %1 = bufferization.to_memref %arg0 : memref<128x64xf32>\n    %2 = bufferization.to_memref %arg2 : memref<128x32xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<128x32xf32>\n    memref.copy %2, %alloc : memref<128x32xf32> to memref<128x32xf32>\n    affine.for %arg3 = 0 to 128 {\n      affine.for %arg4 = 0 to 32 {\n        affine.for %arg5 = 0 to 64 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<128x64xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<64x32xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<128x32xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<128x32xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<128x32xf32>\n    return %3 : tensor<128x32xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<128x32xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<128x64xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<128x64xf32>) -> tensor<128x64xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<64x32xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<64x32xf32>) -> tensor<64x32xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<128x32xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<128x32xf32>) -> tensor<128x32xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<128x64xf32>, tensor<64x32xf32>) outs(%arg2 : tensor<128x32xf32>) -> tensor<128x32xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<128x32xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<128x32xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 128, 1], ["%arg4", 0, 32, 1], ["%arg5", 0, 64, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 770853}, "linalg.matmul ins(%arg0, %arg1 : tensor<512x1024xf32>, tensor<1024x32xf32>) outs(%arg2 : tensor<512x32xf32>) -> tensor<512x32xf32>_5": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<512x1024xf32>, tensor<1024x32xf32>) outs(%arg2 : tensor<512x32xf32>) -> tensor<512x32xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<512x1024xf32>, %arg1: tensor<1024x32xf32>, %arg2: tensor<512x32xf32>) -> tensor<512x32xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<512x1024xf32>, tensor<1024x32xf32>) outs(%arg2 : tensor<512x32xf32>) -> tensor<512x32xf32>\n  return %ret : tensor<512x32xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<512x1024xf32>, %arg1: tensor<1024x32xf32>, %arg2: tensor<512x32xf32>) -> tensor<512x32xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<1024x32xf32>\n    %1 = bufferization.to_memref %arg0 : memref<512x1024xf32>\n    %2 = bufferization.to_memref %arg2 : memref<512x32xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<512x32xf32>\n    memref.copy %2, %alloc : memref<512x32xf32> to memref<512x32xf32>\n    affine.for %arg3 = 0 to 512 {\n      affine.for %arg4 = 0 to 32 {\n        affine.for %arg5 = 0 to 1024 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<512x1024xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<1024x32xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<512x32xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<512x32xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<512x32xf32>\n    return %3 : tensor<512x32xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<512x32xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<512x1024xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<512x1024xf32>) -> tensor<512x1024xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<1024x32xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<1024x32xf32>) -> tensor<1024x32xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<512x32xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<512x32xf32>) -> tensor<512x32xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<512x1024xf32>, tensor<1024x32xf32>) outs(%arg2 : tensor<512x32xf32>) -> tensor<512x32xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<512x32xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<512x32xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 512, 1], ["%arg4", 0, 32, 1], ["%arg5", 0, 1024, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 62924064}, "linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x128xf32>) outs(%arg2 : tensor<512x128xf32>) -> tensor<512x128xf32>_6": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x128xf32>) outs(%arg2 : tensor<512x128xf32>) -> tensor<512x128xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<512x256xf32>, %arg1: tensor<256x128xf32>, %arg2: tensor<512x128xf32>) -> tensor<512x128xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x128xf32>) outs(%arg2 : tensor<512x128xf32>) -> tensor<512x128xf32>\n  return %ret : tensor<512x128xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<512x256xf32>, %arg1: tensor<256x128xf32>, %arg2: tensor<512x128xf32>) -> tensor<512x128xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<256x128xf32>\n    %1 = bufferization.to_memref %arg0 : memref<512x256xf32>\n    %2 = bufferization.to_memref %arg2 : memref<512x128xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<512x128xf32>\n    memref.copy %2, %alloc : memref<512x128xf32> to memref<512x128xf32>\n    affine.for %arg3 = 0 to 512 {\n      affine.for %arg4 = 0 to 128 {\n        affine.for %arg5 = 0 to 256 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<512x256xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<256x128xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<512x128xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<512x128xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<512x128xf32>\n    return %3 : tensor<512x128xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<512x128xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<512x256xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<512x256xf32>) -> tensor<512x256xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<256x128xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<256x128xf32>) -> tensor<256x128xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<512x128xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<512x128xf32>) -> tensor<512x128xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x128xf32>) outs(%arg2 : tensor<512x128xf32>) -> tensor<512x128xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<512x128xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<512x128xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 512, 1], ["%arg4", 0, 128, 1], ["%arg5", 0, 256, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 60097072}, "linalg.matmul ins(%arg0, %arg1 : tensor<64x32xf32>, tensor<32x1024xf32>) outs(%arg2 : tensor<64x1024xf32>) -> tensor<64x1024xf32>_7": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<64x32xf32>, tensor<32x1024xf32>) outs(%arg2 : tensor<64x1024xf32>) -> tensor<64x1024xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<64x32xf32>, %arg1: tensor<32x1024xf32>, %arg2: tensor<64x1024xf32>) -> tensor<64x1024xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<64x32xf32>, tensor<32x1024xf32>) outs(%arg2 : tensor<64x1024xf32>) -> tensor<64x1024xf32>\n  return %ret : tensor<64x1024xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<64x32xf32>, %arg1: tensor<32x1024xf32>, %arg2: tensor<64x1024xf32>) -> tensor<64x1024xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<32x1024xf32>\n    %1 = bufferization.to_memref %arg0 : memref<64x32xf32>\n    %2 = bufferization.to_memref %arg2 : memref<64x1024xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<64x1024xf32>\n    memref.copy %2, %alloc : memref<64x1024xf32> to memref<64x1024xf32>\n    affine.for %arg3 = 0 to 64 {\n      affine.for %arg4 = 0 to 1024 {\n        affine.for %arg5 = 0 to 32 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<64x32xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<32x1024xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<64x1024xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<64x1024xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<64x1024xf32>\n    return %3 : tensor<64x1024xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<64x1024xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<64x32xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<64x32xf32>) -> tensor<64x32xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<32x1024xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<32x1024xf32>) -> tensor<32x1024xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<64x1024xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<64x1024xf32>) -> tensor<64x1024xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<64x32xf32>, tensor<32x1024xf32>) outs(%arg2 : tensor<64x1024xf32>) -> tensor<64x1024xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<64x1024xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<64x1024xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 64, 1], ["%arg4", 0, 1024, 1], ["%arg5", 0, 32, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 5000359}, "linalg.matmul ins(%arg0, %arg1 : tensor<64x128xf32>, tensor<128x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>_8": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<64x128xf32>, tensor<128x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<64x128xf32>, %arg1: tensor<128x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<64x128xf32>, tensor<128x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n  return %ret : tensor<64x64xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<64x128xf32>, %arg1: tensor<128x64xf32>, %arg2: tensor<64x64xf32>) -> tensor<64x64xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<128x64xf32>\n    %1 = bufferization.to_memref %arg0 : memref<64x128xf32>\n    %2 = bufferization.to_memref %arg2 : memref<64x64xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<64x64xf32>\n    memref.copy %2, %alloc : memref<64x64xf32> to memref<64x64xf32>\n    affine.for %arg3 = 0 to 64 {\n      affine.for %arg4 = 0 to 64 {\n        affine.for %arg5 = 0 to 128 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<64x128xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<128x64xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<64x64xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<64x64xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<64x64xf32>\n    return %3 : tensor<64x64xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<64x64xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<64x128xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<64x128xf32>) -> tensor<64x128xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<128x64xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<128x64xf32>) -> tensor<128x64xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<64x64xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<64x128xf32>, tensor<128x64xf32>) outs(%arg2 : tensor<64x64xf32>) -> tensor<64x64xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<64x64xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<64x64xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 64, 1], ["%arg4", 0, 64, 1], ["%arg5", 0, 128, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 1789723}, "linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x64xf32>) outs(%arg2 : tensor<512x64xf32>) -> tensor<512x64xf32>_9": {"operation": "linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x64xf32>) outs(%arg2 : tensor<512x64xf32>) -> tensor<512x64xf32>", "wrapped_operation": "func.func @func_call(%arg0: tensor<512x256xf32>, %arg1: tensor<256x64xf32>, %arg2: tensor<512x64xf32>) -> tensor<512x64xf32> {\n  %ret = linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x64xf32>) outs(%arg2 : tensor<512x64xf32>) -> tensor<512x64xf32>\n  return %ret : tensor<512x64xf32>\n}", "lowered_operation": "module {\n  func.func @func_call(%arg0: tensor<512x256xf32>, %arg1: tensor<256x64xf32>, %arg2: tensor<512x64xf32>) -> tensor<512x64xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<256x64xf32>\n    %1 = bufferization.to_memref %arg0 : memref<512x256xf32>\n    %2 = bufferization.to_memref %arg2 : memref<512x64xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<512x64xf32>\n    memref.copy %2, %alloc : memref<512x64xf32> to memref<512x64xf32>\n    affine.for %arg3 = 0 to 512 {\n      affine.for %arg4 = 0 to 64 {\n        affine.for %arg5 = 0 to 256 {\n          %4 = affine.load %1[%arg3, %arg5] : memref<512x256xf32>\n          %5 = affine.load %0[%arg5, %arg4] : memref<256x64xf32>\n          %6 = affine.load %alloc[%arg3, %arg4] : memref<512x64xf32>\n          %7 = arith.mulf %4, %5 : f32\n          %8 = arith.addf %6, %7 : f32\n          affine.store %8, %alloc[%arg3, %arg4] : memref<512x64xf32>\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<512x64xf32>\n    return %3 : tensor<512x64xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<512x64xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_arg0 = bufferization.alloc_tensor() : tensor<512x256xf32>\n%arg0 = linalg.fill ins(%val : f32) outs(%tmp_arg0 : tensor<512x256xf32>) -> tensor<512x256xf32>\n%tmp_arg1 = bufferization.alloc_tensor() : tensor<256x64xf32>\n%arg1 = linalg.fill ins(%val : f32) outs(%tmp_arg1 : tensor<256x64xf32>) -> tensor<256x64xf32>\n%tmp_arg2 = bufferization.alloc_tensor() : tensor<512x64xf32>\n%arg2 = linalg.fill ins(%val : f32) outs(%tmp_arg2 : tensor<512x64xf32>) -> tensor<512x64xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.matmul ins(%arg0, %arg1 : tensor<512x256xf32>, tensor<256x64xf32>) outs(%arg2 : tensor<512x64xf32>) -> tensor<512x64xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<512x64xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<512x64xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 512, 1], ["%arg4", 0, 64, 1], ["%arg5", 0, 256, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg5"], ["%arg5", "%arg4"], ["%arg3", "%arg4"]], "store_data": []}, "execution_time": 29933738}, "linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<64x16x32x512xf32>, tensor<8x16x1x1xf32>) outs (%init: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32>_1": {"operation": "linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<64x16x32x512xf32>, tensor<8x16x1x1xf32>) outs (%init: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32>", "wrapped_operation": "func.func @func_call(%input: tensor<64x16x32x512xf32>, %filter: tensor<8x16x1x1xf32>, %init: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32> {\n  %ret = linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<64x16x32x512xf32>, tensor<8x16x1x1xf32>) outs (%init: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32>\n  return %ret : tensor<64x8x16x256xf32>\n}", "lowered_operation": "#map = affine_map<(d0, d1) -> (d0 * 2 + d1 * 3)>\nmodule {\n  func.func @func_call(%arg0: tensor<64x16x32x512xf32>, %arg1: tensor<8x16x1x1xf32>, %arg2: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<8x16x1x1xf32>\n    %1 = bufferization.to_memref %arg0 : memref<64x16x32x512xf32>\n    %2 = bufferization.to_memref %arg2 : memref<64x8x16x256xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<64x8x16x256xf32>\n    memref.copy %2, %alloc : memref<64x8x16x256xf32> to memref<64x8x16x256xf32>\n    affine.for %arg3 = 0 to 64 {\n      affine.for %arg4 = 0 to 8 {\n        affine.for %arg5 = 0 to 16 {\n          affine.for %arg6 = 0 to 256 {\n            affine.for %arg7 = 0 to 16 {\n              affine.for %arg8 = 0 to 1 {\n                affine.for %arg9 = 0 to 1 {\n                  %4 = affine.apply #map(%arg5, %arg8)\n                  %5 = affine.apply #map(%arg6, %arg9)\n                  %6 = affine.load %1[%arg3, %arg7, %4, %5] : memref<64x16x32x512xf32>\n                  %7 = affine.load %0[%arg4, %arg7, %arg8, %arg9] : memref<8x16x1x1xf32>\n                  %8 = affine.load %alloc[%arg3, %arg4, %arg5, %arg6] : memref<64x8x16x256xf32>\n                  %9 = arith.mulf %6, %7 : f32\n                  %10 = arith.addf %8, %9 : f32\n                  affine.store %10, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<64x8x16x256xf32>\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<64x8x16x256xf32>\n    return %3 : tensor<64x8x16x256xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<64x8x16x256xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_input = bufferization.alloc_tensor() : tensor<64x16x32x512xf32>\n%input = linalg.fill ins(%val : f32) outs(%tmp_input : tensor<64x16x32x512xf32>) -> tensor<64x16x32x512xf32>\n%tmp_filter = bufferization.alloc_tensor() : tensor<8x16x1x1xf32>\n%filter = linalg.fill ins(%val : f32) outs(%tmp_filter : tensor<8x16x1x1xf32>) -> tensor<8x16x1x1xf32>\n%tmp_init = bufferization.alloc_tensor() : tensor<64x8x16x256xf32>\n%init = linalg.fill ins(%val : f32) outs(%tmp_init : tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<64x16x32x512xf32>, tensor<8x16x1x1xf32>) outs (%init: tensor<64x8x16x256xf32>) -> tensor<64x8x16x256xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<64x8x16x256xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<64x8x16x256xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 64, 1], ["%arg4", 0, 8, 1], ["%arg5", 0, 16, 1], ["%arg6", 0, 256, 1], ["%arg7", 0, 16, 1], ["%arg8", 0, 1, 1], ["%arg9", 0, 1, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg7", "%arg5 * 2 + %arg8 * 3", "%arg6 * 2 + %arg9 * 3"], ["%arg4", "%arg7", "%arg8", "%arg9"], ["%arg3", "%arg4", "%arg5", "%arg6"]], "store_data": []}, "execution_time": 84324244}, "linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<3> : tensor<2xi64>} ins (%input, %filter: tensor<4x64x128x128xf32>, tensor<128x64x1x1xf32>) outs (%init: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32>_3": {"operation": "linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<3> : tensor<2xi64>} ins (%input, %filter: tensor<4x64x128x128xf32>, tensor<128x64x1x1xf32>) outs (%init: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32>", "wrapped_operation": "func.func @func_call(%input: tensor<4x64x128x128xf32>, %filter: tensor<128x64x1x1xf32>, %init: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32> {\n  %ret = linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<3> : tensor<2xi64>} ins (%input, %filter: tensor<4x64x128x128xf32>, tensor<128x64x1x1xf32>) outs (%init: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32>\n  return %ret : tensor<4x128x43x43xf32>\n}", "lowered_operation": "#map = affine_map<(d0, d1) -> (d0 * 3 + d1 * 3)>\nmodule {\n  func.func @func_call(%arg0: tensor<4x64x128x128xf32>, %arg1: tensor<128x64x1x1xf32>, %arg2: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<128x64x1x1xf32>\n    %1 = bufferization.to_memref %arg0 : memref<4x64x128x128xf32>\n    %2 = bufferization.to_memref %arg2 : memref<4x128x43x43xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<4x128x43x43xf32>\n    memref.copy %2, %alloc : memref<4x128x43x43xf32> to memref<4x128x43x43xf32>\n    affine.for %arg3 = 0 to 4 {\n      affine.for %arg4 = 0 to 128 {\n        affine.for %arg5 = 0 to 43 {\n          affine.for %arg6 = 0 to 43 {\n            affine.for %arg7 = 0 to 64 {\n              affine.for %arg8 = 0 to 1 {\n                affine.for %arg9 = 0 to 1 {\n                  %4 = affine.apply #map(%arg5, %arg8)\n                  %5 = affine.apply #map(%arg6, %arg9)\n                  %6 = affine.load %1[%arg3, %arg7, %4, %5] : memref<4x64x128x128xf32>\n                  %7 = affine.load %0[%arg4, %arg7, %arg8, %arg9] : memref<128x64x1x1xf32>\n                  %8 = affine.load %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x128x43x43xf32>\n                  %9 = arith.mulf %6, %7 : f32\n                  %10 = arith.addf %8, %9 : f32\n                  affine.store %10, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x128x43x43xf32>\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<4x128x43x43xf32>\n    return %3 : tensor<4x128x43x43xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<4x128x43x43xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_input = bufferization.alloc_tensor() : tensor<4x64x128x128xf32>\n%input = linalg.fill ins(%val : f32) outs(%tmp_input : tensor<4x64x128x128xf32>) -> tensor<4x64x128x128xf32>\n%tmp_filter = bufferization.alloc_tensor() : tensor<128x64x1x1xf32>\n%filter = linalg.fill ins(%val : f32) outs(%tmp_filter : tensor<128x64x1x1xf32>) -> tensor<128x64x1x1xf32>\n%tmp_init = bufferization.alloc_tensor() : tensor<4x128x43x43xf32>\n%init = linalg.fill ins(%val : f32) outs(%tmp_init : tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.conv_2d_nchw_fchw {dilations = dense<3> : tensor<2xi64>, strides = dense<3> : tensor<2xi64>} ins (%input, %filter: tensor<4x64x128x128xf32>, tensor<128x64x1x1xf32>) outs (%init: tensor<4x128x43x43xf32>) -> tensor<4x128x43x43xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<4x128x43x43xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<4x128x43x43xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 4, 1], ["%arg4", 0, 128, 1], ["%arg5", 0, 43, 1], ["%arg6", 0, 43, 1], ["%arg7", 0, 64, 1], ["%arg8", 0, 1, 1], ["%arg9", 0, 1, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg7", "%arg5 * 3 + %arg8 * 3", "%arg6 * 3 + %arg9 * 3"], ["%arg4", "%arg7", "%arg8", "%arg9"], ["%arg3", "%arg4", "%arg5", "%arg6"]], "store_data": []}, "execution_time": 194067930}, "linalg.conv_2d_nchw_fchw {dilations = dense<2> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<32x16x64x256xf32>, tensor<64x16x1x1xf32>) outs (%init: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32>_4": {"operation": "linalg.conv_2d_nchw_fchw {dilations = dense<2> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<32x16x64x256xf32>, tensor<64x16x1x1xf32>) outs (%init: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32>", "wrapped_operation": "func.func @func_call(%input: tensor<32x16x64x256xf32>, %filter: tensor<64x16x1x1xf32>, %init: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32> {\n  %ret = linalg.conv_2d_nchw_fchw {dilations = dense<2> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<32x16x64x256xf32>, tensor<64x16x1x1xf32>) outs (%init: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32>\n  return %ret : tensor<32x64x32x128xf32>\n}", "lowered_operation": "#map = affine_map<(d0, d1) -> (d0 * 2 + d1 * 2)>\nmodule {\n  func.func @func_call(%arg0: tensor<32x16x64x256xf32>, %arg1: tensor<64x16x1x1xf32>, %arg2: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<64x16x1x1xf32>\n    %1 = bufferization.to_memref %arg0 : memref<32x16x64x256xf32>\n    %2 = bufferization.to_memref %arg2 : memref<32x64x32x128xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<32x64x32x128xf32>\n    memref.copy %2, %alloc : memref<32x64x32x128xf32> to memref<32x64x32x128xf32>\n    affine.for %arg3 = 0 to 32 {\n      affine.for %arg4 = 0 to 64 {\n        affine.for %arg5 = 0 to 32 {\n          affine.for %arg6 = 0 to 128 {\n            affine.for %arg7 = 0 to 16 {\n              affine.for %arg8 = 0 to 1 {\n                affine.for %arg9 = 0 to 1 {\n                  %4 = affine.apply #map(%arg5, %arg8)\n                  %5 = affine.apply #map(%arg6, %arg9)\n                  %6 = affine.load %1[%arg3, %arg7, %4, %5] : memref<32x16x64x256xf32>\n                  %7 = affine.load %0[%arg4, %arg7, %arg8, %arg9] : memref<64x16x1x1xf32>\n                  %8 = affine.load %alloc[%arg3, %arg4, %arg5, %arg6] : memref<32x64x32x128xf32>\n                  %9 = arith.mulf %6, %7 : f32\n                  %10 = arith.addf %8, %9 : f32\n                  affine.store %10, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<32x64x32x128xf32>\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<32x64x32x128xf32>\n    return %3 : tensor<32x64x32x128xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<32x64x32x128xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_input = bufferization.alloc_tensor() : tensor<32x16x64x256xf32>\n%input = linalg.fill ins(%val : f32) outs(%tmp_input : tensor<32x16x64x256xf32>) -> tensor<32x16x64x256xf32>\n%tmp_filter = bufferization.alloc_tensor() : tensor<64x16x1x1xf32>\n%filter = linalg.fill ins(%val : f32) outs(%tmp_filter : tensor<64x16x1x1xf32>) -> tensor<64x16x1x1xf32>\n%tmp_init = bufferization.alloc_tensor() : tensor<32x64x32x128xf32>\n%init = linalg.fill ins(%val : f32) outs(%tmp_init : tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.conv_2d_nchw_fchw {dilations = dense<2> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<32x16x64x256xf32>, tensor<64x16x1x1xf32>) outs (%init: tensor<32x64x32x128xf32>) -> tensor<32x64x32x128xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<32x64x32x128xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<32x64x32x128xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 32, 1], ["%arg4", 0, 64, 1], ["%arg5", 0, 32, 1], ["%arg6", 0, 128, 1], ["%arg7", 0, 16, 1], ["%arg8", 0, 1, 1], ["%arg9", 0, 1, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg7", "%arg5 * 2 + %arg8 * 2", "%arg6 * 2 + %arg9 * 2"], ["%arg4", "%arg7", "%arg8", "%arg9"], ["%arg3", "%arg4", "%arg5", "%arg6"]], "store_data": []}, "execution_time": 334456474}, "linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x16x256x32xf32>, tensor<8x16x7x7xf32>) outs (%init: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32>_5": {"operation": "linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x16x256x32xf32>, tensor<8x16x7x7xf32>) outs (%init: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32>", "wrapped_operation": "func.func @func_call(%input: tensor<4x16x256x32xf32>, %filter: tensor<8x16x7x7xf32>, %init: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32> {\n  %ret = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x16x256x32xf32>, tensor<8x16x7x7xf32>) outs (%init: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32>\n  return %ret : tensor<4x8x125x13xf32>\n}", "lowered_operation": "#map = affine_map<(d0, d1) -> (d0 * 2 + d1)>\nmodule {\n  func.func @func_call(%arg0: tensor<4x16x256x32xf32>, %arg1: tensor<8x16x7x7xf32>, %arg2: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32> {\n    %0 = bufferization.to_memref %arg1 : memref<8x16x7x7xf32>\n    %1 = bufferization.to_memref %arg0 : memref<4x16x256x32xf32>\n    %2 = bufferization.to_memref %arg2 : memref<4x8x125x13xf32>\n    %alloc = memref.alloc() {alignment = 64 : i64} : memref<4x8x125x13xf32>\n    memref.copy %2, %alloc : memref<4x8x125x13xf32> to memref<4x8x125x13xf32>\n    affine.for %arg3 = 0 to 4 {\n      affine.for %arg4 = 0 to 8 {\n        affine.for %arg5 = 0 to 125 {\n          affine.for %arg6 = 0 to 13 {\n            affine.for %arg7 = 0 to 16 {\n              affine.for %arg8 = 0 to 7 {\n                affine.for %arg9 = 0 to 7 {\n                  %4 = affine.apply #map(%arg5, %arg8)\n                  %5 = affine.apply #map(%arg6, %arg9)\n                  %6 = affine.load %1[%arg3, %arg7, %4, %5] : memref<4x16x256x32xf32>\n                  %7 = affine.load %0[%arg4, %arg7, %arg8, %arg9] : memref<8x16x7x7xf32>\n                  %8 = affine.load %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x8x125x13xf32>\n                  %9 = arith.mulf %6, %7 : f32\n                  %10 = arith.addf %8, %9 : f32\n                  affine.store %10, %alloc[%arg3, %arg4, %arg5, %arg6] : memref<4x8x125x13xf32>\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    %3 = bufferization.to_tensor %alloc : memref<4x8x125x13xf32>\n    return %3 : tensor<4x8x125x13xf32>\n  }\n}\n\n", "transform_wrapped_operation": "module attributes {torch.debug_module_name = \"Net\"} {\nfunc.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }\nfunc.func private @printFlops(f64)\nfunc.func private @printI64(i64)\nfunc.func private @printNewline()\nfunc.func private @printMemrefF32(tensor<*xf32>)\n\n\nfunc.func @matmul() -> tensor<4x8x125x13xf32>{\n\n%val = arith.constant 2.00000e+00 : f32\n%zero = arith.constant 0.00000e+00 : f32\n\n%tmp_input = bufferization.alloc_tensor() : tensor<4x16x256x32xf32>\n%input = linalg.fill ins(%val : f32) outs(%tmp_input : tensor<4x16x256x32xf32>) -> tensor<4x16x256x32xf32>\n%tmp_filter = bufferization.alloc_tensor() : tensor<8x16x7x7xf32>\n%filter = linalg.fill ins(%val : f32) outs(%tmp_filter : tensor<8x16x7x7xf32>) -> tensor<8x16x7x7xf32>\n%tmp_init = bufferization.alloc_tensor() : tensor<4x8x125x13xf32>\n%init = linalg.fill ins(%val : f32) outs(%tmp_init : tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32>\n\n%t0 = func.call @nanoTime() : () -> (i64)\n\n%return_arg = linalg.conv_2d_nchw_fchw {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins (%input, %filter: tensor<4x16x256x32xf32>, tensor<8x16x7x7xf32>) outs (%init: tensor<4x8x125x13xf32>) -> tensor<4x8x125x13xf32>\n%t = func.call @nanoTime() : () -> (i64)\n%delta = arith.subi %t, %t0 : i64\n%fp = arith.uitofp %delta : i64 to f64\n// func.call @printFlops(%fp) : (f64) -> ()\nfunc.call @printI64(%delta) : (i64) -> ()\nfunc.call @printNewline() : () -> ()\n\nreturn %return_arg : tensor<4x8x125x13xf32> \n}\n\nfunc.func @main(){\n    %c1 = arith.constant 1: index\n    %c0 = arith.constant 0 : index\n    %n = arith.constant 2: index\n    scf.for %i = %c0 to %n step %c1 {\n    %outputmain = func.call @matmul() : () -> tensor<4x8x125x13xf32>\n    }\n    return\n}\n}\n", "loops_data": {"nested_loops": [["%arg3", 0, 4, 1], ["%arg4", 0, 8, 1], ["%arg5", 0, 125, 1], ["%arg6", 0, 13, 1], ["%arg7", 0, 16, 1], ["%arg8", 0, 7, 1], ["%arg9", 0, 7, 1]], "op_count": {"+": 1, "-": 0, "*": 1, "/": 0, "exp": 0}, "load_data": [["%arg3", "%arg7", "%arg5 * 2 + %arg8", "%arg6 * 2 + %arg9"], ["%arg4", "%arg7", "%arg8", "%arg9"], ["%arg3", "%arg4", "%arg5", "%arg6"]], "store_data": []}, "execution_time": 153700290}}